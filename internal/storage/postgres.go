package storage

import (
	"context"
	"errors"
	"fmt"
	"github.com/igorrnk/ypdiploma.git/internal/configs"
	"github.com/igorrnk/ypdiploma.git/internal/model"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/rs/zerolog/log"
)

type PostgresStorage struct {
	context context.Context
	dbPool  *pgxpool.Pool
}

const (
	createTableUsers string = `CREATE TABLE IF NOT EXISTS users (
    	userID integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    	login text UNIQUE, hash text, salt text);`
	createTableTokens        = `CREATE TABLE IF NOT EXISTS token (token char(64) UNIQUE, userID integer);`
	insertUser        string = `INSERT INTO users(login, hash) VALUES($1, $2);`
	selectUser        string = `SELECT hash FROM users WHERE login = $1`
	selectUserID      string = `SELECT user_id FROM users WHERE login = $1`
	selectIsUser      string = `SELECT COUNT(*) FROM users WHERE login = $1`
)

func NewPostgresStorage(ctx context.Context, config *configs.DBConfigType) (*PostgresStorage, error) {
	storage := &PostgresStorage{
		context: ctx,
	}
	var err error
	storage.dbPool, err = pgxpool.New(context.Background(), config.DBUri)
	if err != nil {
		log.Error().Msgf("New database pool: %v", err)
		return nil, err
	}

	_, err = storage.dbPool.Exec(ctx, createTableUsers)
	_, err = storage.dbPool.Exec(ctx, createTableTokens)
	if err != nil {
		log.Error().Msgf("NewDBStorage: failed create tables: %v", err)
		return nil, err
	}
	return storage, nil
}

func (storage *PostgresStorage) IsUser(ctx context.Context, user *model.User) (bool, error) {
	var count int64
	err := storage.dbPool.QueryRow(ctx, selectIsUser, user.Login).Scan(&count)
	if err != nil {
		return false, model.ErrDB
	}
	return count == 1, nil
}

func (storage *PostgresStorage) AddUser(ctx context.Context, user *model.User) error {
	_, err := storage.dbPool.Exec(ctx, insertUser, user.Login, user.Hash)
	if err != nil {
		return model.ErrDB
	}
	var id int64
	err = storage.dbPool.QueryRow(ctx, selectUserID, user.Login).Scan(&id)
	if err != nil {
		return model.ErrDB
	}
	user.ID = fmt.Sprint(id)
	return nil
}

func (storage *PostgresStorage) GetUser(ctx context.Context, user *model.User) error {
	err := storage.dbPool.QueryRow(ctx, selectUser, user.Login).Scan(&user.Hash)
	if errors.Is(err, pgx.ErrNoRows) {
		return model.ErrNoUser
	}
	var id int64
	err = storage.dbPool.QueryRow(ctx, selectUserID, user.Login).Scan(&id)
	if err != nil {
		return model.ErrDB
	}
	user.ID = fmt.Sprint(id)
	return nil
}

func (storage *PostgresStorage) AddToken(token string) error {
	//TODO implement me
	panic("implement me")
}

func (storage *PostgresStorage) IsToken(token string) (login string, err error) {
	//TODO implement me
	panic("implement me")
}

func (storage *PostgresStorage) AddOrder() error {
	//TODO implement me
	panic("implement me")
}

func (storage *PostgresStorage) GetOrders() error {
	//TODO implement me
	panic("implement me")
}
